xa = <1,0, 1, 0>
xb = <1, 0,0, 1>
y = < 0, 0, 1, 1>


m = len(y)


w_two_a = <0.4,0>
w_two_b = <0.2, 0.3>
b_two = <0, 0>

w_three_a = <0.7, 0.4, 0.5>
w_three_b = <0.3, 0.2, 0.7>
b_three = <0, 0, 0>

w_final = <0.2, 0.0, 0.1>
b_final = 0



tanh(z) = {
    (e ^ z - e ^ (-z))/ (e^ z + e ^ (-z))
}

d_tanh(z) = {
    1 - (tanh(z)) ^ 2
}

sigmoid(z) = {
    1 / (1 + e ^ (-z))
}

fn(xa, xb, wa, wb, b) = {
     z = xa * wa +  xb * wb + b
     tanh(z)
}

final(xa, xb,xc, wa, wb, wc, b) = {
     z = xa * wa +  xb * wb + wc * xc + b
     sigmoid(z)
}

loss(a, y) = {
    -y * log(a) - (1 - y) * log(1-a)
}


prediction() = {
     layer_a = <0, 0, 0,0>
     layer_b = <0,0,0,0>
     tmp = 0
     for i in 0 to m {
        tmp = fn(xa<i>, xb<i>, w_two_a<0>, w_two_b<0>, b<0>)
        push(layer_a, i, tmp)
        tmp = fn(xa<i>, xb<i>, w_two_a<1>, w_two_b<1>, b<1>)
        push(layer_b, i, tmp)
     }


     layer_three_a = <0, 0, 0,0>
     layer_three_b = <0, 0, 0,0>
     layer_three_c = <0, 0, 0,0>

     tmp = 0
     for i in 0 to m {
        tmp = fn(layer_a<i>, layer_b<i>, w_three_a<0>, w_three_b<0>, b_three<0>)
        push(layer_three_a, i, tmp)
        tmp = fn(layer_a<i>, layer_b<i>, w_three_a<1>, w_three_b<1>, b_three<1>)
        push(layer_three_b, i, tmp)
        tmp = fn(layer_a<i>, layer_b<i>, w_three_a<2>, w_three_b<2>, b_three<2>)
        push(layer_three_c, i, tmp)
     }
     output = <0, 0 , 0, 0>
     for i in 0 to m {
        tmp = final(layer_three_a<i>, layer_three_b<i>,layer_three_c<i>,w_final<0>, w_final<1>, w_final<2>, b_final)
        push(output, i, tmp)
     }
     
}

gradient_descent() =  {
      prediction()
      tmp = 0
      for i in 0 to m {
        tmp += loss(output<i>, y<i>)
      }
      cost = tmp / m
      print(cost)

     dw_final = <0,0,0>
     tmp = 0
     for i in 0 to m {
        tmp += (output<i> - y<i>) * layer_three_a<i>
     }
     push(dw_final, 0, tmp/m)

     tmp = 0
     for i in 0 to m {
        tmp += (output<i> - y<i>) * layer_three_b<i>
     }
     push(dw_final, 1, tmp/m)

     tmp = 0
     for i in 0 to m {
        tmp += (output<i> - y<i>) * layer_three_c<i>
     }
     push(w_three_a, 2, tmp/m)

     tmp = 0
     for i in 0 to m {
        tmp += (output<i> - y<i>)
     }
     b_final -= tmp / m
     

     dz_three_a = <0,0,0, 0>
     dz_three_b = <0,0,0, 0>
     dz_three_c = <0,0,0, 0>
     tmp = 0  
     for i in 0 to m {
        tmp = dw_final<0> * (output<i> - y<i>) * d_tanh(layer_three_a<i>)
        push(dz_three_a, i, tmp)
     }
     for i in 0 to m {
        tmp = dw_final<1> * (output<i> - y<i>) * d_tanh(layer_three_b<i>)
        push(dz_three_b, i, tmp)
     }
     for i in 0 to m {
        tmp = dw_final<2> * (output<i> - y<i>) * d_tanh(layer_three_c<i>)
        push(dz_three_c, i, tmp)
     }
      
   
     dw_three_a = <0.0, 0.0, 0.0>
     dw_three_b = <0.0, 0.0, 0.0>
     db_three = <0, 0, 0>
     tmp = 0 
     for i in 0 to m {
         tmp += dz_three_a<i> * layer_a<i>
     }
     push(dw_three_a, 0, tmp/m)

     tmp = 0 
     for i in 0 to m {
         tmp += dz_three_b<i> * layer_a<i>
     }
     push(dw_three_a, 1, tmp/m)

     tmp = 0 
     for i in 0 to m {
         tmp += dz_three_c<i> * layer_a<i>
     }
     push(dw_three_a, 2, tmp/m)

     tmp = 0 
     for i in 0 to m {
         tmp += dz_three_a<i> * layer_b<i>
     }
     push(dw_three_b, 0, tmp/m)

     tmp = 0 
     for i in 0 to m {
         tmp += dz_three_b<i> * layer_b<i>
     }
     push(dw_three_b, 1, tmp/m)

     tmp = 0 
     for i in 0 to m {
         tmp += dz_three_c<i> * layer_b<i>
     }
     push(dw_three_b, 2, tmp/m)

     









     for i in 0 to 3 {
        tmp = w_final<i> - dw_final<i>
        push(w_final, i, tmp)
     } 
}